{"mappings":"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","sources":["./script.js"],"sourcesContent":["'use strict';\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    this.coords = coords; //[lat, lng]\n    this.distance = distance; // in km\n    this.duration = duration; // in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cyc1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cyc1);\n\n/////////////////////////////////////////////////////////////\n// APPLICATION ARCHITECTURE\nclass App {\n  #map;\n  #mapEvent;\n  #workouts = [];\n  #mapZoom = 13;\n\n  constructor() {\n    this._getPosition();\n    //Get data from local storage\n    this._getLocalStorage();\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    console.log(`https://www.google.com/maps/@${latitude},${longitude},13z`);\n\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoom);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    this.#map.on('click', this._showForm.bind(this));\n  }\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n  _hideForm() {\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    // If workout is running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      // Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout is cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      // Check if data is valid\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Add new object to workout array\n    this.#workouts.push(workout);\n    console.log(workout);\n\n    // Render workout on map as marker\n    this.renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide form and clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n  renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n          <h2 class=\"workout__title\">${workout.description}</h2>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">${\n              workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n            }</span>\n            <span class=\"workout__value\">${workout.distance}</span>\n            <span class=\"workout__unit\">km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚è±</span>\n            <span class=\"workout__value\">${workout.duration}</span>\n            <span class=\"workout__unit\">min</span>\n          </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n      <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n            <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">ü¶∂üèº</span>\n            <span class=\"workout__value\">${workout.cadence}</span>\n            <span class=\"workout__unit\">spm</span>\n          </div>\n        </li>\n    `;\n    if (workout.type === 'cycling')\n      html += `\n    <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚õ∞</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n          </div>\n        </li>\n        `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    console.log(workoutEl);\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n    console.log(workout);\n\n    this.#map.setView(workout.coords, this.#mapZoom, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface\n    workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n}\n\nconst app = new App();\n"],"names":["$7e7826c51b2a67966a0c063b231575d8$var$form","document","querySelector","$7e7826c51b2a67966a0c063b231575d8$var$containerWorkouts","$7e7826c51b2a67966a0c063b231575d8$var$inputType","$7e7826c51b2a67966a0c063b231575d8$var$inputDistance","$7e7826c51b2a67966a0c063b231575d8$var$inputDuration","$7e7826c51b2a67966a0c063b231575d8$var$inputCadence","$7e7826c51b2a67966a0c063b231575d8$var$inputElevation","$7e7826c51b2a67966a0c063b231575d8$var$Workout","constructor","coords","distance","duration","Date","now","slice","this","_setDescription","description","type","toUpperCase","months","date","getMonth","getDate","click","clicks","$7e7826c51b2a67966a0c063b231575d8$var$Running","cadence","super","calcPace","pace","$7e7826c51b2a67966a0c063b231575d8$var$Cycling","elevationGain","calcSpeed","speed","$7e7826c51b2a67966a0c063b231575d8$var$app","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","console","log","$7e7826c51b2a67966a0c063b231575d8$var$_map","L","map","setView","$7e7826c51b2a67966a0c063b231575d8$var$_mapZoom","tileLayer","attribution","addTo","on","_showForm","mapE","$7e7826c51b2a67966a0c063b231575d8$var$_mapEvent","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","$7e7826c51b2a67966a0c063b231575d8$var$_workouts","push","renderWorkoutMarker","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","id","toFixed","insertAdjacentHTML","workoutEl","target","find","work","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","forEach"],"version":3,"file":"index.a918917d.js.map"}